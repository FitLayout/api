<?xml version="1.0" encoding="UTF-8"?>
<d:document xmlns="http://www.w3.org/1999/xhtml"
		  xmlns:d="http://cssbox.sourceforge.net/docs">
<d:title>FITLayout Framework Manual</d:title>
<d:author>Radek Burget<br/>
<a href="mailto:burgetr@fit.vutbr.cz">burgetr@fit.vutbr.cz</a>
</d:author>

<d:toc />

<d:section id="intro">
<d:title>Introduction</d:title>
<p>
<strong>FITLayout</strong> is an extensible web page segmentation and analysis framework written in Java.
It defines a generic Java API for representing a rendered web page and its division to visual areas and
their further analysis. It also provides a base for implementing page segmentation algorithms with a common application
interface. The framework includes tools for post-processing the segmentation result by different text or visual 
classification methods. It also provides tools for controlling the segmentation process and examining the segmentation
results through a graphical user interface.
</p>
</d:section>

<d:section id="architecture">
<d:title>Architecture of the Framework</d:title>
<!-- TODO figure -->
<p>
FITLayout operates on a rendered page represented by a <dfn><d:ref target="boxtree">box tree</d:ref></dfn>. The box tree
is obtained by rendering the page and calculating the positions, fonts, colors and other visual features of the
indivudual pieces of contents (<dfn>boxes</dfn>). The box tree represents an input of the page segmentation algorithms.
</p>
<p>
<em><d:ref target="segmentation">Page segmentation</d:ref></em> is the main task implemented in FITLayout. It analyzes the
input boxtree and produces a tree of <dfn>visual areas</dfn> that correspond to the detected visual blocks
in the page. The created visual area tree may be further processed by <d:ref target="operators">area tree operators</d:ref>
that represent independent post-processing steps of the segmentation. These steps may change the organization
of the resulting tree of visual areas, e.g. group several nodes to new areas, etc.
</p>
<p>
The process of page rendering and segmentation may be controlled using a provided set of <d:ref target="tools">tools</d:ref>.
These tools include a visual browser with a graphical user interface that can be used for configuring and executing
the individual tasks. Moreover a scriptable processor is provided that allows to use JavaScript for running
the tasks in batch mode. 
</p>

<d:subsection id="modules">
<d:title>Modules</d:title>
<p>The FitLayout framework consists of the following basic modules:</p>
<ul>
<li><strong><d:module ref="api">API</d:module></strong> – the basic Java interfaces and
their generic implementation that define a common application interface for page segmentation methods (see below).</li>
<li><strong><d:module ref="layout-cssbox">CSSBox bindings</d:module></strong> – a default
implementation of the rendered page source based on the <a href="http://cssbox.sourceforge.net">CSSBox
rendering engine</a>.</li>
<li><strong><d:module ref="segmentation">Segmentation</d:module></strong> – an implementation
of a basic page segmentation method that may be further extended by adding custom area tree operators.</li>
<!-- <li><strong><d:module ref="classify">Classification</d:module></strong> – an implementation
of different text or visual classification methods that may be used for automatic tagging the obtained areas
based on their visual or text properties.</li>  -->
<li><strong><d:module ref="tools">Tools</d:module></strong> – tools 
for controlling the segmentation process that include a graphical browser of the segmentation result.</li>
</ul> 
<p>There exist some more additional modules that will be described later.</p>

<p>The API (<d:module ref="api">cssbox-api</d:module>) module provides a shared API common for all the
remaining modules. It provides the following basic Java packages:
</p>
<ul>
<li><d:api package="org/fit/layout/model">org.fit.layout.model</d:api> – basic java interfaces used for
representing the rendered page (a box tree) and the result of segmentation (an area tree).</li>
<li><d:api package="org/fit/layout/impl">org.fit.layout.impl</d:api> – default implementations of the
interfaces from the <code>model</code> package. These implementations may be used as a starting
point for further extension in applications.</li>
<li><d:api package="org/fit/layout/api">org.fit.layout.api</d:api> – interfaces specific for the FITLayout
framework itself. They include the services of different kinds as described below.</li>
<li><d:api package="org/fit/layout/gui">org.fit.layout.gui</d:api> – common interfaces of a GUI browser
used for monitoring the page processing.</li>
</ul>  
<p>The details about the individual available interfaces are given in the appropriate sections below.</p>
</d:subsection>

<d:subsection id="services">
<d:title>Services</d:title>
<p>
The FITLayout architecture is easily extensible by creating new plugins providing new functionality such as
new box tree sources (document renderers), segmentation algorithms, area tree post-processing operators
or GUI extensions. The plugins use the standard Java
<a href="https://docs.oracle.com/javase/tutorial/ext/basics/spi.html">Extensible applications</a> framework. 
</p>
<p>The following types of services are recognized:</p>
<ul>
<li><d:api class="org/fit/layout/api/BoxTreeProvider">BoxTreeProvider</d:api> –
	a box tree source; i.e. the page renderer. Based on the input parameters (e.g. the page URL),
	it renders the page and produces the box tree.
</li>
<li><d:api class="org/fit/layout/api/AreaTreeProvider">AreaTreeProvider</d:api> –
	an area tree source; i.e. a basic segmentation algorithm. It gets a box tree on its input
	and produces a <dfn>visual area tree</dfn> that represents the segmented page.
</li>
<li><d:api class="org/fit/layout/api/AreaTreeOperator">AreaTreeOperator</d:api> –
	a post-processing operation applied on the visual area tree. It may perform any operation
	with the tree such as joining nodes, splitting nodes, extending the hierarchy, etc.
</li>
<li><d:api class="org/fit/layout/api/LogicalTreeProvider">LogicalTreeProvider</d:api> –
	an analyzer that gets the final area tree on its input and assigns semantics to
	selected areas (tree nodes). 
</li>
</ul>
<p>Each service is identified by its unique identifier obtained using its 
<d:api class="file:///home/burgetr/tmp/fitlayout/api/org/fit/layout/api/Service" anchor="getId()">getId()</d:api>
method.
All the services may accept some input parametres. They implement a
<d:api class="org/fit/layout/api/ParametrizedOperation">ParametrizedOperation</d:api> interface
that allows to get the information about the required input parametres (their names and types)
and to assign the values to them.</p>
<p>For accessing the services, FITLayout provides a simple
<d:api class="org/fit/layout/api/ServiceManager">ServiceManager</d:api> that provides
static methods for locating the services of the given types. 
</p>

</d:subsection>

</d:section>

<d:section id="boxtree">
<d:title>Box Tree</d:title>
<p>
The whole rendered page is represented using a <d:api class="org/fit/layout/model/Page">Page</d:api>
object. Its <d:api class="org/fit/layout/model/Page" anchor="getRoot()">getRoot()</d:api> method
obtains a root node of the <dfn>box tree</dfn> that represents the page contents. The nodes of the box
tree are formed by the <d:api class="org/fit/layout/model/Box">Box</d:api> objects that represent the
individual rendered boxes. Each box has a fixed position in the rendered page obtained using the
<d:api class="org/fit/layout/model/Box" anchor="getBounds()">getBounds()</d:api> method and
some more visual properties such as font size, colors, etc. The related methods are defined
by a shared <d:api class="org/fit/layout/model/ContentRect">ContentRect</d:api>
interface.</p> 

<p>The
<d:api class="org/fit/layout/model/Box" anchor="getType()">getType()</d:api> method obtains
the box type which is one of the following:</p>
<ul>
<li><code>ELEMENT</code> – a box generated by a DOM element</li>
<li><code>TEXT_CONTENT</code> – a box representing a displayed text</li>
<li><code>REPLACED_CONTENT</code> – a box representing a replaced content (an image or other object)</li>
</ul>
<p>The boxes are organized in a hierarchical structure. The 
  <d:api class="org/fit/layout/model/Box" anchor="getParentBox()">getParentBox()</d:api>,
  <d:api class="org/fit/layout/model/Box" anchor="getChildBox()">getChildBox()</d:api> and
  <d:api class="org/fit/layout/model/Box" anchor="getChildCount()">getChildCount()</d:api>
methods may be used for traversing the hierarchy. The <code>TEXT_CONTENT</code> and <code>REPLACED_CONTENT</code>
boxes are always the leaf nodes of the tree. The <code>ELEMENT</code> nodes may exist anywhere
in the tree.
</p>

<d:subsection id="cssbox-box-source">
<d:title>CSSBox Box Source</d:title>
<p>The default box source is implemented in the <d:module ref="layout-cssbox">layout-cssbox</d:module>
(CSSBox bindings) module as the <d:api class="org/fit/layout/cssbox/CSSBoxTreeProvider">CSSBoxTreeProvider</d:api>
class. The individual boxes are represented using the
<d:api class="org/fit/layout/cssbox/BoxNode">BoxNode</d:api> objects. The CSSBox box source renders
an input document identified by its URL. It supports the HTML/CSS and PDF documents. It is based on
the open-source <a href="http://cssbox.sourceforge.net">CSSBox rendering engine</a>.</p>

</d:subsection>

</d:section>

<d:section id="segmentation">
<d:title>Segmentation</d:title>
<p>The segmentation algorithm takes a box tree on its input and it produces a tree of visual areas. The resulting tree
is represented by a <d:api class="org/fit/layout/model/AreaTree">AreaTree</d:api> object. Its
<d:api class="org/fit/layout/model/AreaTree" anchor="getRoot()">getRoot()</d:api> methods obtains a root node
of the <dfn>area tree</dfn> that represents the segmentation result. Each node of the area tree is represented using
an <d:api class="org/fit/layout/model/Area">Area</d:api> object that corresponds to a visual area detected in the page.
The root node corresponds to the whole page area, the descendant nodes correspond to smaller detected areas. The leaf
areas may contain the actual boxes from the box tree that represent the contents of the area.</p>

<p>The nodes provide the basic tree navigation and manipulation methods similary as for the box tree. All these functions
are specified by a shared <d:api class="org/fit/layout/model/AreaTreeNode">AreaTreeNode</d:api> interface.</p>

<p>The position of the area in the rendered page and all its visual features such as fonts and colors may be obtained
throught the implemented <d:api class="org/fit/layout/model/ContentRect">ContentRect</d:api> the same way as for the
individual boxes. However, since the contained boxes may have different visual properties (e.g. different font sizes),
the corresponding methods for the visual area (such as <d:api class="org/fit/layout/model/ContentRect" anchor="getFontSize()">getFontSize()</d:api>)
return the average values for the whole area.
</p>

<p>Optionally, the mutual positions of the areas within its parent area may be described by an arbitrary <dfn>topology</dfn>.
A typical example is a gird topology that represents the area positions using a flexible grid. The position of each
area in the topology may be obtained using the <d:api class="org/fit/layout/model/Area" anchor="getTopology()">getTopology</d:api>
method and is represented using a generic <d:api class="org/fit/layout/model/AreaTopology">AreaTopology</d:api>
interface.</p>

<d:subsection id="grouping-segmentation">
<d:title>Default Extensible Segmentation Algorithm</d:title>

</d:subsection>

</d:section>

<d:section id="tools">
<d:title>Tools</d:title>
</d:section>

<d:section id="plugins">
<d:title>Creating FITLayout plugins</d:title>
</d:section>

<d:section id="projects">
<d:title>FITLayout packages</d:title>
</d:section>

</d:document>
